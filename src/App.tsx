import React from 'react';
import { Col, Container, Row, Tab, Tabs } from 'react-bootstrap';
import './App.css';
import { ExportData } from './components/ExportData/ExportData';
import { MapView } from './components/MapView/MapView';
import { QsoForm } from './components/QsoForm/QsoForm';
import { QsoList } from './components/QsoList/QsoList';
import { QthForm } from './components/QthForm/QthForm';
import { RadioForm } from './components/RadioForm/RadioForm';
import { IMapConfig } from './entities/IMapConfig';
import { IQsoData } from './entities/IQsoData';
import { IQsoMapData } from './entities/IQsoMapData';
import { IQthData } from './entities/IQthData';

export interface IAppProps
{

}

export interface IAppState
{
  configurationMap: IMapConfig;
  qth?: IQthData;
  qsos: IQsoData[];

  qsoMapData?: IQsoMapData;
}

export class App extends React.Component<IAppProps, IAppState>
{
  constructor(props: IAppProps)
  {
    super(props);

    let ZeroPosition: IMapConfig = { Latitude: 0, Longitude: 0, Zoom: 0 };
    //let emptyQth: IQthData = { Latitude: 0, Longitude: 0, Locator: "", Location: "", References: [], isPortable: true };

    this.state = 
    {
      configurationMap: ZeroPosition, 
      //qth: emptyQth,
      qsos: [] 
    };
  }

  public render(): React.ReactElement<IAppProps>
  {
    const { qth, qsos, configurationMap, qsoMapData } = this.state;

    return(
      <Container>
        <Tabs defaultActiveKey="map" id="uncontrolled-tab-example" className="mb-3">
          <Tab eventKey="map" title="Map">
            <p>Map center and preview of data</p>
            <MapView QsoMapData={qsoMapData} onChange={this._onChangeMapView} />
          </Tab>
          <Tab eventKey="qth" title="QTH">
            <QthForm CenterLatitude={configurationMap.Latitude} CenterLongitude={configurationMap.Longitude} onChange={this._onChangeQth} />
          </Tab>
          <Tab eventKey="equipment" title="Equipment">
            <Row>
              <Col>
                <RadioForm />
              </Col>
              <Col>
                Antennas
              </Col>
            </Row>
          </Tab>
          <Tab eventKey="qso" title="QSO">
            <Row>
              <Col>
                <QsoForm qthLocator={qth?.Locator} callBack={this._onAddQso} />
              </Col>
            </Row>
            <Row>
              <Col>
                <QsoList data={qsos} onRemoveQso={this._onRemoveQso} />
              </Col>
            </Row>
          </Tab>
          <Tab eventKey="export" title="Export">
            <ExportData QsoMapData={qsoMapData} />
          </Tab>
          <Tab eventKey="about" title="About">
            <p>
The actual version of <b>QSO Map generator</b> is the 0.7.0, this is an application to generate data file and get HTML and Javascript, to include an interactive Map of QSO in an WEB page.<br />
Everything was born from the desire to deepen the study of React and TypeScript, taking inspiration from an article I read in a magazine that explained how, with a series of steps through different applications, to get to create a map with the QSOs made.<br />
This immediately reminded me that it was something I did, many years ago, on my old website. In that case, however, I used images of the maps generated by a program (which now I don't even remember what it was).<br />
I immediately wondered how to add maps on the site, which were also interactive, and from there was born the first implementation using <a href="https://www.openstreetmap.org/copyright" target="_blank" rel="noreferrer">Open Street Map</a> and the <a href="https://leafletjs.com/" target="_blank" rel="noreferrer">Leaflet library</a>.<br />
Having the need to show different maps on different pages, it was immediately clear to me that it was necessary to use a data file for each page, so I started looking for some standards, but not finding anything that suited me (if you know one report it to me), I opted to define my own using JSON as it would be handled by some Javascript code.
            </p>
            <p>
At this point, after having implemented everything on my site (<a href="https://bobboteck.github.io/sota/sota-monte-elefante/">here you can see a couple of examples</a>),the need arose to have a more comfortable way to write the JSON data file, and therefore the idea of creating this application.<br />
            </p>
            <p>
Information details on application and the source code are available in the GitHub repository <a href="https://github.com/bobboteck/qso-map-generator">https://github.com/bobboteck/qso-map-generator</a>.
            </p>
            <p>
The following packages have been used in this application:
            </p>
            <ul>
              <li><a href="https://www.npmjs.com/package/react" target="_blank" rel="noreferrer">React</a></li>
              <li><a href="https://www.npmjs.com/package/react-bootstrap" target="_blank" rel="noreferrer">React Bootstrap</a></li>
              <li><a href="https://www.npmjs.com/package/typescript" target="_blank" rel="noreferrer">TypeScript</a></li>
              <li><a href="https://www.npmjs.com/package/react-leaflet" target="_blank" rel="noreferrer">React Leaflet</a></li>
              <li><a href="https://www.npmjs.com/package/qth-locator" target="_blank" rel="noreferrer">QTH Locator</a></li>
              <li><a href="https://www.npmjs.com/package/react-syntax-highlighter" target="_blank" rel="noreferrer">React syntax highlighter</a></li>
            </ul>
            <p>
73 de IU0PHY (ex IW0GTF) @Bobboteck
            </p>
          </Tab>
        </Tabs>
      </Container>
    );
  }


  private _onChangeMapView = (configuration: IMapConfig): void =>
  {
    const { qth, qsos } = this.state;

    let qmData: IQsoMapData = { MapConfig: configuration, QTH: qth, QSOs: qsos };

    this.setState({ configurationMap: configuration, qsoMapData: qmData });
  }


  private _onChangeQth = (data: IQthData): void =>
  {
    const { configurationMap, qsos } = this.state;

    let qmData: IQsoMapData = { MapConfig: configurationMap, QTH: data, QSOs: qsos };

    this.setState({ qth: data, qsoMapData: qmData });
  }


  private _onAddQso = (data: IQsoData): void =>
  {
    const { configurationMap, qth, qsos } = this.state;

    let qmData: IQsoMapData = { MapConfig: configurationMap, QTH: qth, QSOs: [...qsos, data] };

    this.setState({ qsos: [...qsos, data], qsoMapData: qmData });
  }

  /**
   * Remove from QSO list objects the QSO with index
   * @param index {number} Array index of QSO to be removed
   */
  private _onRemoveQso = (index: number): void =>
  {
    const { configurationMap, qth, qsos } = this.state;
    // Remove the QSO at the index
    qsos.splice(index, 1);
    // Update map data
    let qmData: IQsoMapData = { MapConfig: configurationMap, QTH: qth, QSOs: qsos };
    // Set new values in the state
    this.setState({ qsos: qsos, qsoMapData: qmData });
  }
}
